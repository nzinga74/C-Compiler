#ifndef TYPE_TOKEN_H
#define TYPE_TOKEN_H

enum TypeToken
{
    // IDENTIFICADOR
    TOKEN_ID,
    //
    TOKEN_OPEN_PARENTHESE,
    TOKEN_CLOSE_PARENTHESE,
    TOKEN_OPEN_BRACKET,
    TOKEN_CLOSE_BRACKET,
    TOKEN_OPEN_BRACE,
    TOKEN_CLOSE_BRACE,
    TOKEN_SEMICOLON,

    // COMMENT
    TOKEN_SIMPLE_COMMENT,
    TOKEN_MULTLINE_COMMENT,

    // ATRIBUTION
    TOKEN_ATRIB,

    // SPECIAL OPERATOR
    TOKEN_QUESTION,
    TOKEN_TWO_POINT,
    TOKEN_POINT,
    TOKEN_COMMA,
    TOKEN_ARROW,
    TOKEN_SCOPE,

    // OPERADORES ARITMETICOS
    TOKEN_OPR_PLUS,
    TOKEN_OPR_PLUS_EGUAL,
    TOKEN_OPR_DOUBLE_PLUS,
    TOKEN_OPR_MULT,
    TOKEN_OPR_MUL_EGUAL,
    TOKEN_OPR_DOUBLE_MULT,
    TOKEN_OPR_DIV,
    TOKEN_OPR_DIV_EGUAL,
    TOKEN_OPR_DOUBLE_DIV,
    TOKEN_OPR_SUBS,
    TOKEN_OPR_DOUBLE_SUBS,
    TOKEN_OPR_SUBS_EGUAL,
    TOKEN_MOD,
    TOKEN_MOD_EGUAL,

    // OPERADOR DE BIT
    TOKEN_BIT_OR,
    TOKEN_BIT_AND,
    TOKEN_BIT_NOT,
    TOKEN_BIT_XOR,

    // OPERADOR DE RELACIONAL
    TOKEN_OR,
    TOKEN_AND,
    TOKEN_NOT,
    TOKEN_DIFFERENT,

    // BIT OPERATOR
    TOKEN_RIGHT_SHIFT,
    TOKEN_LEFT_SHIFT,
    // OPERADORES RELACIONAS
    TOKEN_GREAT_THAN,
    TOKEN_GREAT_IGUAL_THAN,
    TOKEN_LESS_THAN,
    TOKEN_LESS_IGUAL_THAN,
    TOKEN_EGUAL,
    TOKEN_DIF,

    // PALAVRAS RESERVADAS
    TOKEN_IF,
    TOKEN_WHILE,
    TOKEN_DO,
    TOKEN_ELSE,
    TOKEN_SWITCH,
    TOKEN_CASE,
    TOKEN_BREAK,
    TOKEN_FOR,
    TOKEN_CONTINUE,
    TOKEN_FINALLY,
    TOKEN_AUTO,
    TOKEN_CONST,
    TOKEN_ENUM,
    TOKEN_EXTERN,
    TOKEN_GOTO,
    TOKEN_REGISTER,
    TOKEN_STATIC,
    TOKEN_SIZEOF,
    TOKEN_TYPEDEF,
    TOKEN_UNION,
    TOKEN_VOLALILE,
    TOKEN_STRUCT,
    TOKEN_RETURN,
    TOKEN_PRINTF,

    TOKEN_INT,
    TOKEN_FLOAT,
    TOKEN_CHAR,
    TOKEN_DOUBLE,
    TOKEN_LONG,
    TOKEN_SHORT,
    TOKEN_SIGNED,
    TOKEN_UNSIGNED,
    TOKEN_VOID,
    TOKEN_END,
    TOKEN_NOT_FOUND,

    TOKEN_VALUE_INT,
    TOKEN_VALUE_DOUBLE,
    TOKEN_VALUE_FLOAT,
    TOKEN_VALUE_STRING,

    TOKEN_MACRO_INCLUDE,
    TOKEN_MACRO_DEFINE,
    TOKEN_MACRO_UNDEF,
    TOKEN_MACRO_IF,
    TOKEN_MACRO_IFDEF,
    TOKEN_MACRO_IFNDEF,
    TOKEN_MACRO_ELSE,
    TOKEN_MACRO_ELIF,
    TOKEN_MACRO_ENDIF,
    TOKEN_MACRO_PRAGMA,
    TOKEN_MACRO_ERROR,
    TOKEN_MACRO_WARNING,
    TOKEN_MACRO_LINE,
    TOKEN_MACRO_ONCE,
    TOKEN_HEADER,

};

#endif